---
name: libs/infinity_emb - Release Publish to pypi

on:
  release:
    types: [published]

env:
  POETRY_VERSION: "1.7.1"
  WORKDIR: "libs/infinity_emb"

jobs:
  publish-to-pypi:
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    runs-on: ubuntu-latest
    environment:
      name: publish
    permissions:
      # This permission is used for trusted publishing:
      # https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
      #
      # Trusted publishing has to also be configured on PyPI for each package:
      # https://docs.pypi.org/trusted-publishers/adding-a-publisher/
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: "3.10"
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: ${{ env.WORKDIR }}
          cache-key: release
      - name: Copy readme
        id: readme-copy
        run: |
          cp ../../README.md .
      - name: Build project for distribution
        run: poetry build
      - name: Check Version
        id: check-version
        run: |
          echo version=$(poetry version --short) >> $GITHUB_OUTPUT
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ env.WORKDIR }}/dist/
          verbose: true
          print-hash: true

  post-test-pypi-publish:
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    
    needs: publish-to-pypi
   
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }} + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: ${{ inputs.working-directory }}
          cache-key: core-release-publish

      - name: Get git tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - name: Set docker tag
        env:
          VERSION: ${{ steps.get-latest-tag.outputs.tag }}
        run: |
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
          
      - name: Install minimal dependencies and import
        shell: bash
        run: |
          sleep 30
          poetry run pip install "infinity-emb[server]==${{ env.VERSION }}"
          poetry run infinity_emb --help
          poetry run python -c "import infinity_emb"
          # print version
          echo version=$(poetry run python -c "import infinity_emb;print(infinity_emb.__version__)") >> $GITHUB_OUTPUT